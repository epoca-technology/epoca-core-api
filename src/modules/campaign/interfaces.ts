




// Service
export interface ICampaignService {
    // Properties
    balance: IAccountBalance,

    // Initializer
    initialize(): Promise<void>,
    stop(): void,



    // Futures Account Balance
    syncBalance(): Promise<void>,
}





// Validations
export interface ICampaignValidations {

}






// Model
export interface ICampaignModel {
    

    // Income Records Management
    saveIncomeRecords(records: IAccountIncomeRecord[]): Promise<void>,
    getLastIncomeRecordTimestamp(): Promise<number|undefined>,
}






/************
 * Campaign *
 ************/





/**
 * Campaign Headline
 * A minified object containing only essential information.
 */
export interface ICampaignHeadline {
    // Universal Unique Identifier
    id: string,

    // Date Range
    start: number,
    end: number|undefined,
}




/**
 * Campaign Record
 * The main object containing all the information related to a campaign.
 */
export interface ICampaignRecord {
    // Universal Unique Identifier
    id: string,

    // Date Range
    start: number,
    end: number|undefined,

    // The snapshot of the futures account balance when the camapaign was started
    initial_balance: number,
}




/**
 * Campaign Configuration Snapshots
 * 
 */
export interface ICampaignConfigurationSnapshots {

}


















/***********
 * Balance *
 ***********/



/**
 * Account Balance
 * In Epoca, the balance is always referring to USDT and is always extracted
 * fresh from Binance's API.
 */
export interface IAccountBalance {
    // The available balance in the account that can be used to initialize positions
    available: number,

    // The balance that has been allocated to positions (margin)
    on_positions: number,

    // The total balance in the account including unrealized pnl
    total: number,

    // The time in which the balance data was last updated by Binance
    ts: number
}












/**********
 * Income *
 **********/






/**
 * Account Income Record
 * Whenever a campaign is active, the account's income is constantly synced
 * with the balance. Individual records are stored in the database for
 * deeper analysis.
 */
export interface IAccountIncomeRecord {
    // The unique identifier of the transaction
    id: string,

    // The time in milliseconds at which the income was generated
    t: number,

    // The income generated by the transaction (can be a negative value)
    v: number
}






// Service
export interface ITransactionService {
    // Properties
    balance: IAccountBalance,

    // Initializer
    initialize(): Promise<void>,
    stop(): void,

    // Futures Account Balance
    syncBalance(): Promise<void>,

    // Futures Account Income
    listIncomeRecords(startAt: number, endAt: number): Promise<IAccountIncomeRecord[]>,
    syncIncome(): Promise<void>
}





// Validations
export interface ITransactionValidations {
    validateDateRange(startAt: number, endAt: number): void
}






// Model
export interface ITransactionModel {


    // Income Records Management
    listIncomeRecords(startAt: number, endAt: number): Promise<IAccountIncomeRecord[]>,
    saveIncomeRecords(records: IAccountIncomeRecord[]): Promise<void>,
    getLastIncomeRecordTimestamp(incomeType: IAccountIncomeType): Promise<number>
}
















/***********
 * Balance *
 ***********/



/**
 * Account Balance
 * In Epoca, the balance is always referring to USDT and is always extracted
 * fresh from Binance's API.
 */
export interface IAccountBalance {
    // The available balance in the account that can be used to initialize positions
    available: number,

    // The balance that has been allocated to positions (margin)
    on_positions: number,

    // The total balance in the account including unrealized pnl
    total: number,

    // The time in which the balance data was last updated by Binance
    ts: number
}












/**********
 * Income *
 **********/






/**
 * Account Income Record
 * The futures account's income is constantly synced and individual 
 * records are stored in the database for deeper analysis.
 */
export type IAccountIncomeType = "REALIZED_PNL"|"COMMISSION"|"FUNDING_FEE";
export interface IAccountIncomeRecord {
    // The unique identifier of the transaction
    id: string,

    // The time in milliseconds at which the income was generated
    t: number,

    // The type of income
    it: IAccountIncomeType,

    // The income generated by the transaction (can be a negative value)
    v: number
}
